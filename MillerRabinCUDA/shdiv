 struct shift {
  int bytes, bits;
 };

 inline bool dwnshft(bigint &b, int &bc, const shift &shs, bigint &r) const {
  int i, nbc = bc - shs.bytes, upbshft = bitsize - shs.bits;
  bool scs = upbshft > 0 && nbc >= 0 && shs.bits >= 0;
  if(scs) {
   if(shs.bytes > 0) {
    for(i = 0; i < shs.bytes; i++) {
     r.num[i] = b.num[i]; 
    }
    for(i = shs.bytes; i < bc; i++) {
     b.num[i - shs.bytes] = b.num[i]; 
    }
    for(i = nbc; i < bc; ++i) {
     b.num[i] = 0;
    }
    bc = nbc;
   }
   if(shs.bits > 0) {
    r.num[shs.bytes] = (b.num[0] << upbshft) >> upbshft;
    nbc = bc - 1;
    for(i = 0; i < nbc; i++) {
     b.num[i] = b.num[i] >> shs.bits; 
     b.num[i] = b.num[i] | (b.num[i + 1] << upbshft);
    }
    b.num[nbc] = b.num[nbc] >> shs.bits; 
    for(; b.num[nbc] == 0; --nbc);
    bc = nbc + 1;
   } 
  }
#ifdef DEBUG_DIVIDE
cout << endl << dec << "dwnshft: bc " << bc << " bigint::size " << bigint::size << " shs.bits " << shs.bits << " scs " << scs << endl;
#endif
  return scs;
 }

 inline bool upshft(bigint &b, int &bc, const shift &shs) const {
  int i, nbc = bc + shs.bytes, dnbshft = bitsize - shs.bits;
  bool scs = dnbshft > 0 && nbc <= bigint::size && shs.bits >= 0;
  if(scs) {
   if(shs.bytes > 0) {
    for(i = bc - 1; i >= 0; --i) {
     b.num[i + shs.bytes] = b.num[i];
     b.num[i] = 0;
    } 
    bc = nbc;
   }
   if(shs.bits > 0) {
    nbc = bc - 1;
    if(bc < bigint::size) {
     b.num[bc] = b.num[bc] | b.num[nbc] >> dnbshft;
     if(b.num[bc] != 0) {
      ++bc;
     }
    }
    b.num[nbc] = b.num[nbc] << shs.bits;
    for(i = nbc; i >= 1; --i) {
     b.num[i] = b.num[i] | b.num[i - 1] >> dnbshft;
     b.num[i - 1] = b.num[i - 1] << shs.bits;
    }
    nbc = bc - 1;
    for(; b.num[nbc] == 0; --nbc); 
    bc = nbc + 1;
   } 
  }  
#ifdef DEBUG_DIVIDE
cout << endl << dec << "upshft: nbc " << nbc << " bigint::size " << bigint::size << " shs.bits " << shs.bits << " scs " << scs << endl;
#endif
  return scs;
 }

 inline int bitcap(const numtype &num) const {
  int i = bitsize, msk = 1 << (i - 1); 
  for(; i > 0; --i) {
   if((num & msk) != 0) {
    break;   
   } else {
    msk = msk >> 1;
   }
  }
  return i; 
 }
 
 inline bool reduce(bigint &b1, int &b1c, bigint &b2, int &b2c, bigint &r, shift &shs) const {
  bool scs = (b1c > b2c) || (compare(b1, b2) >= 0);
  int msk = 1;
  if(scs) {
   shs.bytes = shs.bits = 0;
   r.init();
   for(int i = 0; i < b2c; ++i) {
    if(b2.num[i] != 0) {
     shs.bytes = i;
     for(int j = 0; j < bitsize; ++i) {
      if((b2.num[i] & msk) != 0) { 
       shs.bits = j;    
       break;
      } else {
       msk = msk << 1;
      }
     }
     break;
    }
   }
   if(shs.bits != 0 || shs.bytes != 0) {
    scs = dwnshft(b2, b2c, shs, r) &&  
     dwnshft(b1, b1c, shs, r);  
   }
  }
  return scs;
 }

 inline bool adjustshift(shift &shs) const {
#ifdef DEBUG_DIVIDE
cout << endl << dec <<  "before: bytes " << shs.bytes << " bits " << shs.bits << endl;
#endif
  if(shs.bits < 0) { 
   --shs.bytes;                                                        
   shs.bits += bitsize;                                     
  }   
#ifdef DEBUG_DIVIDE
cout << endl << dec <<  "after: bytes " << shs.bytes << " bits " << shs.bits << endl;
#endif
  return (shs.bytes >= 0 && shs.bits >= 0);
 }

#ifdef SHIFT_DIVIDE
 inline bool divide(const bigint &b1, const bigint &b2, bigint &q, bigint &r) const {
  bool scs;
  shift shsr, shsd;
  static const shift shsb = {0, 1};
  bigint tb1(0), tb2(0), tb3(0), tb4(0), tr1, tr2;
  int cmp, tb1c, tb2c = b2.capacity(), tb3c, tb4c;
  if(scs = (tb2c > 0)) {
   cmp = compare(b1, b2);
   if(cmp > 0) {
    tb1 = b1;
    tb1c = tb1.capacity();
    tb2 = b2;
    if(scs = reduce(tb1, tb1c, tb2, tb2c, tr1, shsr)) {    
     if(tb2c == 1 && tb2.num[0] == 1) {
      q = tb1;    
      r.init();
     } else {
      q.init();
      do {
       tb3 = tb1;
       tb4 = tb2;
       tb3c = tb1c;
       tb4c = tb2c;
       shsd.bytes = tb3c - tb4c;
       shsd.bits = bitcap(tb3.num[tb3c - 1]) - bitcap(tb4.num[tb4c - 1]);
       if(scs = (adjustshift(shsd) && upshft(tb4, tb4c, shsd))) {
        if(compare(tb4, tb3) > 0) {
         --shsd.bits;
         scs = adjustshift(shsd) && dwnshft(tb4, tb4c, shsb, tr2);
        }
        if(scs && (scs = subtract(tb3, tb4, tb1))) {
         tb1c = tb1.capacity();
         q.num[shsd.bytes] = q.num[shsd.bytes] | (1 << shsd.bits);         
        }
       }
      } while(scs && compare(tb1, tb2) >= 0);
      if(scs) {
       tb1c = tb1.capacity();
       scs = upshft(tb1, tb1c, shsr) &&
        add(tb1, tr1, r);
      }
     }
    }
   } else if(cmp < 0) {
    q.init();
    r = b1;
   } else {
    q.init();
    r.init();
    q.num[0] = 1;
   }  
  }
  return scs;
 }
#endif //SHIFT_DIVIDE
